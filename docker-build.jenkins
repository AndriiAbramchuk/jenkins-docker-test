#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'master'
        }
    options {
        timestamps()
    }
    stages {
/*        stage("docker login") {
            steps {
                echo " ============== docker login =================="
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login -u $USERNAME -p $PASSWORD
                    """
                }
            }
        }
        stage("create docker image php-apache") {
            steps {
                echo " ============== start building image =================="
                dir ('docker/php-apache/') {
                	sh 'docker build -t andriiabramchuk/php-apache:8.1.1 . '
                }
            }
        }
        stage("create docker image mariadb") {
            steps {
                echo " ============== start building image =================="
                dir ('docker/mariadb/') {
                	sh 'docker build -t andriiabramchuk/mariadb:latest . '
                }
            }        
        }
        stage("docker push") {
            steps {
                echo " ============== start pushing image =================="
                sh '''
                docker push andriiabramchuk/php-apache:8.1.1
                docker push andriiabramchuk/mariadb:latest
                '''
            }
        } */
        stage("minikube start") {
            steps {
                echo " ============== minikube start =================="
              sh 'minikube start'
            }
        }
        stage("create deploy and service") {
            steps {
                echo " ============== start create deploy and service =================="
                dir ('k8s/kubectl/') {
                 sh '''
                kubectl apply -f deployment.yml
                kubectl apply -f service.yml
                '''
                }
            }
        }        
 /*       stage("minikube delete") {
            steps {
                echo " ============== minikube delete =================="
              sh 'minikube stop; minikube delete'
            }
        }*/
//     stage("start docker-compose run") {
//            steps {
//                echo " ============== run docker compose =================="
//                dir ('docker/') {
//               	sh 'docker-compose up -d'
//               }
//            }        
//        }
    }
}
